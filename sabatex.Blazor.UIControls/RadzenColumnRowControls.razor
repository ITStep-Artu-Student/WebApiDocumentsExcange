@typeparam T

<RadzenDataGridColumn TItem="T" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false"
    TextAlign="TextAlign.Center" Width="@Width">
    <Template Context="client">
        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(args,client))"
            @onclick:stopPropagation="true" />
        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => DeleteRow(args,client))"
            @onclick:stopPropagation="true" />
    </Template>
    <EditTemplate Context="client">
        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(args,client))" />
        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1"
            Click="@((args) => CancelEdit(args,client))" />
    </EditTemplate>
</RadzenDataGridColumn>

@code{

    [Parameter]
    public EventCallback<T> OnEditRow{get;set;}
        private async Task EditRow(MouseEventArgs e,T value)
        {
            await OnEditRow.InvokeAsync(value);
        }
   
    [Parameter]
    public EventCallback<T> OnCancelEdit{get;set;}
       private async Task CancelEdit(MouseEventArgs e,T value)
        {
            await OnCancelEdit.InvokeAsync(value);
        }


    [Parameter]
    public EventCallback<T> OnSaveRow{get;set;}
    private async Task SaveRow(MouseEventArgs e,T value)
    {
        await OnSaveRow.InvokeAsync(value);
    }
   
    [Parameter]
    public EventCallback<T> OnDeleteRow{get;set;}
    private async Task DeleteRow(MouseEventArgs e,T value)
    {
        await OnDeleteRow.InvokeAsync(value);
    }
 
    [Parameter]
    public string Width{get;set;}=default!;
}