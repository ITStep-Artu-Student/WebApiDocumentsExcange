// sabatex Copyright (c) 2021 by Serhiy Lakas
// version 1.0.2

procedure Error(source,message,textJSON="")
	Сообщить("Помилка в "+source + " " + message + Символы.ПС + textJSON); 
endprocedure
procedure Logged(level,source,message)
endprocedure

#region bagel

// parse object and return 1c object
function ParseInvoice(conf,objectId,node,externalObject)
	var objectJSON;
	// create object
	
	// organization must exist
	externalObject.Insert("organization",Справочники.Организации.ПолучитьСсылку(new UUID(externalObject.IDDEPOT)));
	externalObject.Insert("contragent",Справочники.Контрагенты.ПолучитьСсылку(new UUID(externalObject.IDSUPPLIER)));
	UnitOfMeassure =  Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду();
	for each item in externalObject.params do
		item.Insert("Nomenklature",Справочники.Номенклатура.ПолучитьСсылку(new UUID(item.COMMODITY)));
	enddo;	
	
    result = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	result.Дата = externalObject.IDDATE;
	result.ОтражатьВБухгалтерскомУчете = false;
	result.ОтражатьВНалоговомУчете = false;
	result.ОтражатьВУправленческомУчете = true;
	result.Организация = externalObject.organization; 
	// try find object by bagelId
	//sabatexExternalObjects = РегистрыСведений.sabatexExternalObjects.СоздатьМенеджерЗаписи();
	//sabatexExternalObjects.ObjectType = "Invoice01";
	//sabatexExternalObjects.ExternalId = incoming.ObjectId;
	//sabatexExternalObjects.Прочитать();
	//if (sabatexExternalObjects.Выбран()) then
	//	// invoice is imported (find local invoice)
	//	doc = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(sabatexExternalObjects.LocalId);
	//	
	//endif;	
	
endfunction



// parse incoming object and return 
// true - object is Ok
// false - missed object
// unresolved - array structure queried objects
function ParseIncomingObject(conf,incoming)  
	objectName =  incoming.ObjectTypeName;
	objectJSON = sabatexJSON.Deserialize(incoming.ObjectJSON);
 
	if (objectName = "Invoice01") then
		return ParseInvoice(conf,incoming.objectId,incoming.node, objectJSON);
	endif;	
	
	
	return false;
endfunction	

#endregion


#region UTConfig
function ObjectToJson(obj,objectType)
	result = new structure;
	result.Insert("root",sabatexJSON.SerializeXDTO(obj));
	if objectType = "Справочник.Номенклатура" then
		if obj.Комплект then
			set = new array;
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	КомплектующиеНоменклатуры.Номенклатура,
				|	КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры,
				|	КомплектующиеНоменклатуры.Комплектующая,
				|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей,
				|	КомплектующиеНоменклатуры.Количество,
				|	КомплектующиеНоменклатуры.ЕдиницаИзмерения,
				|	КомплектующиеНоменклатуры.ДоляСтоимости
				|ИЗ
				|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
				|ГДЕ
				|	КомплектующиеНоменклатуры.Номенклатура = &Номенклатура";
			
			Запрос.УстановитьПараметр("Номенклатура", obj.Ref);
			
			items = Запрос.Выполнить().Выбрать();
			while items.Next() do
				item = new structure;
				item.Insert("Номенклатура",string(items.Номенклатура.UUID()));
				item.Insert("Комплектующая",string(items.Комплектующая.UUID()));
				item.Insert("Количество",items.Количество);
				item.Insert("ЕдиницаИзмерения",string(items.ЕдиницаИзмерения.UUID()));
				item.Insert("ДоляСтоимости",items.ДоляСтоимости);
				set.Add(item);
			enddo;	
			
			result.Insert("set",set);
	
		endif;	
	endif;
	
	
	return sabatexJSON.Serialize(result);
endfunction	
function GetSupportedObjects()
	result = new array;
	result.Add(Метаданные.Справочники.Номенклатура.ПолноеИмя());
	result.Add(Метаданные.Справочники.КлассификаторЕдиницИзмерения.ПолноеИмя());
	return result;
endfunction	
function ParseQueriedObject(conf,item,nodeName)
	
	objectType = НРег("Справочник.ДоговорыКонтрагентов");
	if item.ObjectType = objectType then
		obj = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(new UUID(item.ObjectId));
		RegisterObjectForNode(obj,nodeName,objectType);
		return true;
	endif;


	objectType = НРег("Справочник.КлассификаторЕдиницИзмерения");
	if item.ObjectType = objectType then
		obj = Справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку(new UUID(item.ObjectId));
		RegisterObjectForNode(obj,nodeName,objectType);
		return true;
	endif;
	
	objectType = НРег("Справочник.Контрагенты");
	if item.ObjectType = objectType then
		obj = Справочники.Контрагенты.ПолучитьСсылку(new UUID(item.ObjectId));
		RegisterObjectForNode(obj,nodeName,objectType);
		return true;
	endif;
	
	objectType = НРег("Справочник.Номенклатура");
	if item.ObjectType = objectType then
		obj = Справочники.Номенклатура.ПолучитьСсылку(new UUID(item.ObjectId));
		RegisterObjectForNode(obj,nodeName,objectType);
		return true;
	endif;
	
	objectType = НРег("Справочник.Организации");
	if item.ObjectType = objectType then
		obj = Справочники.Организации.ПолучитьСсылку(new UUID(item.ObjectId));
		RegisterObjectForNode(obj,nodeName,objectType);
		return true;
	endif;

	objectType = НРег("Справочник.ТипыЦенНоменклатуры");
	if item.ObjectType = objectType then
		obj = Справочники.ТипыЦенНоменклатуры.ПолучитьСсылку(new UUID(item.ObjectId));
		RegisterObjectForNode(obj,nodeName,objectType);
		return true;
	endif;

	objectType = НРег("Справочник.ТипыЦенНоменклатурыКонтрагентов");
	if item.ObjectType = objectType then
		obj = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПолучитьСсылку(new UUID(item.ObjectId));
		RegisterObjectForNode(obj,nodeName,objectType);
		return true;
	endif;

	
	
	return false;
endfunction
procedure DoAnalizeObjects(conf)
	var incomingObject;
	// only fresh (miss error)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 50
		|	sabatexExchangeIncoming.objectId,
		|	sabatexExchangeIncoming.node,
		|	sabatexExchangeIncoming.objectType,
		|	sabatexExchangeIncoming.objectJSON,
		|	sabatexExchangeIncoming.dateStamp,
		|	sabatexExchangeIncoming.Error
		|ИЗ
		|	РегистрСведений.sabatexExchangeIncoming КАК sabatexExchangeIncoming
		|ГДЕ
		|	sabatexExchangeIncoming.Error ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	objects = РезультатЗапроса.Выбрать();
	
	Пока objects.Next() Цикл
	    НачатьТранзакцию();
		try
			objectJSON = sabatexJSON.Deserialize(objects.ObjectJSON);
			incomingObject = ParseIncomingObject(conf,objects);
			if incomingObject <> null then
				// object enter to system 
				//eo = РегистрыСведений.sabatexExternalObjects.СоздатьМенеджерЗаписи();
				//eo.ExternalId =
				
				
			endif;	
		    ЗафиксироватьТранзакцию();
		except
			ОтменитьТранзакцию();
			m = РегистрыСведений.sabatexExchangeIncoming.СоздатьМенеджерЗаписи();
			m.objectId = objects.objectId;
			m.node = objects.node;
			m.objectType = objects.objectType;
			m.Прочитать();
			m.Error = ОписаниеОшибки();
			m.Записать(true);
		endtry;	

		
		
	КонецЦикла;
endprocedure	

#endregion


#region APIFunctions
// return true (is success)
function Login(conf) export
	form = new Map;
	form.Insert("nodeName",conf.nodeName);
	form.Insert("password",conf.APIPassword);
	try
		token = sabatexWebApi.HTTPSPostForm(conf,"api/v0/login",form);
		headers=new Map;
		headers.Insert("apiToken",token);
		conf.Insert("headers",headers);
		return true;
	except
		Error("Login","Помилка ідентифікації на сервері! Error:"+ОписаниеОшибки());
		return false;
	endtry;	
endfunction	
function POSTObject(conf,url,object) export
	jsonText = sabatexJSON.Serialize(object);
	return sabatexWebApi.HTTPSPostJson(conf,url,jsonText);
endfunction

#region objectTypes
function GetObjectTypes(conf,nodeName)
	query = new Map;
	query.Insert("take",conf.take);
	query.Insert("nodeName",nodeName);
	response = sabatexWebApi.HTTPSGet(conf,"/api/v0/objecttypes",query);
	if response.StatusCode = 200 then
		return sabatexJSON.Deserialize(response.GetBodyAsString());	
	endif;
	
	Error("GetObjectTypes","Помилка запиту with StatusCode " + response.StatusCode);
	raise "Помилка запиту with StatusCode " + response.StatusCode;
endfunction	
function GetCurrentNodeObjectType(conf,name)
	response = sabatexWebApi.HTTPSGet(conf,"/api/v0/objecttypes/"+name);
	if response.StatusCode = 200 then
		return sabatexJSON.Deserialize(response.GetBodyAsString());	
	endif;
	
	if response.StatusCode = 404 then
		return null;	
	endif;
		
	Error("GetCurrentNodeObjectType","Помилка запиту with StatusCode " + response.StatusCode);
	raise "Помилка запиту в GetCurrentNodeObjectType with StatusCode " + response.StatusCode;
endfunction	
function PostObjectType(conf,objectTypeName)
	obj = new structure;
	obj.Insert("Name",objectTypeName);

	response = POSTObject(conf,"/api/v0/objecttypes",obj);
	
	if response.StatusCode = 200 then
		return sabatexJSON.Deserialize(response.GetBodyAsString());	
	endif;
	
	Error("PostObjectType","Помилка POST with StatusCode " + response.StatusCode);
	raise "Помилка POST with StatusCode " + response.StatusCode;
 
endfunction	
#endregion

#region objects
function GetIncomingObjects(conf,nodeName)
	query = new Map;
	query.Insert("take",conf.take);
	query.Insert("nodeName",nodeName);
	response = sabatexWebApi.HTTPSGet(conf,"/api/v0/objects",query);
	if response.StatusCode = 200 then
		return sabatexJSON.Deserialize(response.GetBodyAsString());	
	else
		Error("GetIncomingObjects","Помилка запиту with StatusCode " + response.StatusCode);
		return new array;
	endif;	
endfunction

function GetResivedObjects(conf)
	query = new Map;
	query.Insert("take",conf.take);
	response = sabatexWebApi.HTTPSGet(conf,"/api/v0/objects/done",query);
	
	if response.StatusCode = 200 then
		return sabatexJSON.Deserialize(response.GetBodyAsString());	
	endif;
	
	Error("GetObjectTypes","Помилка запиту with StatusCode " + response.StatusCode);
	raise "Помилка запиту with StatusCode " + response.StatusCode;
endfunction	

function DeleteExchangeObject(conf,id)
	response = sabatexWebApi.HTTPSDelete(conf,"/api/v0/objects",id);
	if response.StatusCode = 200 then
		return true;	
	endif;
	
	Error("DeleteObjects","Помилка видалення Обєкта з id=" +id+" with StatusCode " + response.StatusCode);
	//raise "Помилка запиту with StatusCode " + response.StatusCode;
	return false;
endfunction	

#endregion

#region quries
// get queried objects
function GetQueriedObjects(conf,nodeName)
	query = new Map;
	query.Insert("take",conf.take);
	query.Insert("nodeName",nodeName);
	response = sabatexWebApi.HTTPSGet(conf,"/api/v0/queries",query);
	if response.StatusCode = 200 then
		return sabatexJSON.Deserialize(response.GetBodyAsString());	
	endif;
	
	Error("GetObjectTypes","Помилка запиту with StatusCode " + response.StatusCode);
	raise "Помилка запиту with StatusCode " + response.StatusCode;

endfunction	
function DeleteQueriesObject(conf,id)
	response = sabatexWebApi.HTTPSDelete(conf,"/api/v0/queries",id);
	if response.StatusCode = 200 then
		return true;	
	endif;
	
	Error("DeleteQueriesObject","Помилка видалення запиту з id=" +id+" with StatusCode " + response.StatusCode);
	//raise "Помилка запиту with StatusCode " + response.StatusCode;
	return false;
endfunction	

// реєструє запит на сервері та повертає ід запита
function PostQueries(conf,destinationNode,ObjectId,ObjectTypeName)
	query = new structure;
	query.Insert("Destination",destinationNode);
	query.Insert("ObjectId",ObjectId);
	query.Insert("ObjectTypeName",ObjectTypeName);
	response = POSTObject(conf,"/api/v0/queries",query);
	if response.StatusCode = 200 then
		return Число(response.GetBodyAsString());	
	endif;
	
	Error("PostQueries","Помилка POST with StatusCode " + response.StatusCode);
	raise "Помилка PostQueries with StatusCode " + response.StatusCode;
endfunction


#endregion
procedure PostSupprotedObjectTypes(conf,objects)
	for each obj in objects do
		form = new Map;
		form.Insert("objectTypeName",obj);
		sabatexWebApi.HTTPSPostForm(conf,"api/v0/objecttypes",form);
	enddo;
endprocedure	
procedure PostMarkResiveObjects(conf,id)
	sabatexWebApi.HTTPSPostForm(conf,"/api/v0/objects/done/"+id);	
endprocedure	

#endregion

function POSTObject1C(conf, // налаштування
	                  destination, // отримувач (string)
					  objectType,// тип обєкта string
					  objectId,  // внутрішнє ІД обєкта (string)
					  dateStamp, // object date stamp
					  objectJSON) export
	postObject = new structure;
	postObject.Insert("Destination",destination);
 	postObject.Insert("ObjectType",objectType);
	postObject.Insert("ObjectId",String(objectId));
	postObject.Insert("ObjectJson",objectJSON);
	postObject.Insert("DateStamp",dateStamp);
	
	response = POSTObject(conf,"/api/v0/objects",postObject);
	if response.StatusCode = 200 then
		return true;	
	endif;
	
	Error("POSTObject1C","Помилка POSTObject1C with StatusCode " + response.StatusCode);
	raise "Помилка POSTObject1C with StatusCode " + response.StatusCode;
		
endfunction	

Function ФункцияПреобразования(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	If ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Then
		Return Строка(Значение);
	EndIf ;
	Отказ = Истина;
EndFunction




// Destination (text or numeric)
// ObjectTypeName (text or numeric

procedure PostUnresolvedQuery(conf,destination,unresolved)
	for each item in unresolved do
		
		query = new structure;
	 	query.Insert("Destination",destination);
	 	query.Insert("ObjectId",item.ObjectId);
	 	query.Insert("ObjectTypeName",item.ObjectTypeName);
		try
			POSTObject(conf,"/api/v0/queries",query);
		except
			erroestring = "Помилка відпавлення запиту destination/objectId/ObjectTypeName:"
			+ destination+"/"+item.ObjectId+"/"+item.ObjectTypeName
			+ "; Api error message:"+ОписаниеОшибки();
			Error("PostUnresolvedQuery",erroestring);
		endtry;	
	enddo;	
	
endprocedure	

// завантаження обєктів в систему
// conf - конфігурація
procedure ReciveObjects(conf,node)
		// read incoming objects 
		incoming = GetIncomingObjects(conf,node);
		for each item in incoming do
			НачатьТранзакцию();
			try
				unresolved = ParseIncomingObject(item,unresolved);
				if unresolved.Count() = 0 then
					DeleteExchangeObject(conf,item.Id);
				else
					PostUnresolvedQuery(conf,Item.SenderId,unresolved);
				endif;
			except
			endtry;	
				
		enddo;

endprocedure

procedure PostObjects(conf)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ  ПЕРВЫЕ "+ conf.take + "
		|	sabatexExchange.objectId КАК objectId,
		|	sabatexExchange.dateStamp КАК dateStamp,
		|	sabatexExchange.node КАК node,
		|	sabatexExchange.objectType,
		|	sabatexExchange.objectJSON
		|ИЗ
		|	РегистрСведений.sabatexExchange КАК sabatexExchange
		|
		|УПОРЯДОЧИТЬ ПО
		|	dateStamp";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	items = РезультатЗапроса.Выбрать();
	
	while items.Next() do
		if POSTObject1C(conf,
		                     items.node,
							 items.objectType,
							 items.objectId,
							 items.dateStamp,
							 items.objectJSON) then
			DeleteObjectForExchange(items.objectId,items.node,items.objectType,items.dateStamp);				 
		endif;
	enddo;
endprocedure	

//procedure DeleteSendedObjects(conf)
//	recesived = GetResivedObjects(conf);
//	for each item in recesived do
//		node = Справочники.sabatexExchangeNodes.НайтиПоНаименованию(item.Destination);
//		if node = Справочники.sabatexExchangeNodes.ПустаяСсылка() then
//			Error("DeleteSendedObjects","Помилковий нод ", sabatexJSON.Serialize(item)) ;
//			continue;	
//		endif;	
//		
//		reg = РегистрыСведений.sabatexExchange.СоздатьМенеджерЗаписи();
//		reg.node = node;
//		reg.objectId = item.ObjectId;
//		reg.dateStamp = item.ObjectDateStamp;
//		reg.Прочитать();
//		reg.dateRecesive = CurrentDate();
//		reg.Записать();
//	enddo;	

//endprocedure	


procedure DoQueriedObjects(conf,node)
		queries = GetQueriedObjects(conf,node);
		for each item in queries do
			НачатьТранзакцию();
			try
				if ParseQueriedObject(conf,item,node) then
					DeleteQueriesObject(conf,item.Id);
				endif;
				ЗафиксироватьТранзакцию();
			except
				ОтменитьТранзакцию();
			endtry;	
		enddo;	
endprocedure	

// реэстрація обєктів для обміну XDTO
//procedure RegisterObjectForExchange(obj,nodeName=null) export
//	ref	= obj.Ref;
//	name = ref.Metadata().FullName();
//	 
//	spr = Справочники.sabatexExchangeObjects.НайтиПоНаименованию(name);
//	if spr = Справочники.sabatexExchangeObjects.ПустаяСсылка() then
//		Error("RegisterObjectForExchange","Для обєкта - " + name + "не передбачено обмін");
//		return;	
//	endif;
//	
//	if spr.Nodes.Count() = 0 then
//		Error("RegisterObjectForExchange","Для обєкта - " + name + "не задані ноди обміну");
//		return;	
//	endif;	
//	
//	for each dest in spr.Nodes do
//		if nodeName <> null then
//			if nodeName <> dest.Node.Description then
//				continue;
//			endif;	
//		endif;	
//		if dest.Filter <> "" then
//			result = false;
//			try
//				result = eval(dest.Filter);
//			except
//				Error("RegisterObjectForExchange","Для типу - " + name + " та нода " +dest.Node.Description + " не вдалося вирахувати вираз: "+dest.Filter);
//				continue;
//			endtry;
//			
//			if not result then
//				continue;
//			endif;	
//		endif;	
//		
//		reg = РегистрыСведений.sabatexExchange.СоздатьМенеджерЗаписи();
//		reg.node = Lower(dest.Node);
//		reg.objectId = Lower(ref.UUID());
//		reg.objectType = Lower(spr);
//		reg.dateStamp = CurrentDate();
//		//reg.objectJSON = sabatexJSON.SerializeXDTO(obj);
//		reg.objectJSON =ObjectToJson(obj,name);
//		reg.Write();
//	enddo;	
//endprocedure	


procedure RegisterObjectForNode(obj,nodeName,objectType) export
	ref	= obj.Ref;
	reg = РегистрыСведений.sabatexExchange.СоздатьМенеджерЗаписи();
	reg.node = Lower(nodeName);
	reg.objectId = Lower(ref.UUID());
	reg.objectType = Lower(objectType);
	reg.dateStamp = CurrentDate();
	reg.objectJSON =ObjectToJson(obj,objectType);
	reg.Write();
endprocedure	

procedure DeleteObjectForExchange(objectId,node,objectType,dateStamp)
	reg = РегистрыСведений.sabatexExchange.СоздатьМенеджерЗаписи();
	reg.node = Lower(node);
	reg.objectId = Lower(objectId);
	reg.objectType = Lower(objectType);
	reg.dateStamp = dateStamp;
	reg.Delete();
endprocedure	

procedure RegisterIncomingObject(objectId,node,objectType,dateStamp,objectJSON)
	reg = РегистрыСведений.sabatexExchangeIncoming.СоздатьМенеджерЗаписи();
	reg.node = node;
	reg.objectId =objectId;
	reg.objectType = objectType;
	reg.Прочитать();
	if reg.Выбран() then
		if reg.dateStamp> dateStamp then
			// пропустимо обєкт з меншою датою
			Logged("log","RegisterIncomingObject","");
			return;	
		endif;
		reg.Error = "";
	endif;
	reg.dateStamp = dateStamp;
	reg.objectJSON = objectJSON;
	reg.Write();
endprocedure	

// обмін з сервером та реєстрація обєктів для прийому
procedure ExchangeProcess() export
	// get conf
	filter = new structure;
	filter.Insert("id",1);
	node = "bagel";
	start = ТекущаяДата();
	log = "";
	try
		conf =  РегистрыСведений.sabatexNodeConfig.Получить(filter);
		if conf.Host = "" then
			raise "Не прочитано конфігураційний файл";
		endif;
		
	
	
	
	
	
	
	

	try
	
		// login to server
		if not Login(conf) then
			return;
		endif;	
	
		// відповідаємо на запити (ставляться в чергу до выдправки)
		if conf.IsQueryActive then
			DoQueriedObjects(conf,node);
		endif;	
	
		// считуємо надіслані обєкти з сервіса (в чергу обробки)
		if conf.IsGetActive then
			ReciveObjects(conf,node);
		endif;	
	
		// відправляємо 50 обєктів / 
		if conf.IsPostActive then
			PostObjects(conf);
		endif;	
	
		// аналізуємо прийняті обєкти  (ставимо в чергу запитів)
		if conf.IsDoAnalizeGetObject then
			DoAnalizeObjects(conf);
		endif;	
	except
		//log = log + Символы.ПС + Символы.ВК + "":
	endtry;
	
	except
		log = log + Символы.ПС + Символы.ВК + ОписаниеОшибки();
	endtry;
	end = ТекущаяДата();
	logR = РегистрыСведений.sabatexExchangeLog.СоздатьМенеджерЗаписи();
	logR.Data = start;
	logR.Log = log;
	logR.Duration = end - start;
	logR.Write();
	
	
endprocedure
