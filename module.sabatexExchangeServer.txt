// sabatex Copyright (c) 2021 by Serhiy Lakas
procedure initializeDefaultExchange(docName) export
	doc = Справочники.sabatexExchangeObjects.НайтиПоНаименованию(docName);
	if doc = Справочники.sabatexExchangeObjects.ПустаяСсылка() then
		doc = Справочники.sabatexExchangeObjects.СоздатьЭлемент();
		doc.Наименование = docName;
		doc.Записать();
	endif;	
endprocedure
// return apiKey
function Login(conf) export
	form = new Map;
	form.Insert("nodeName",conf.nodeName);
	form.Insert("password",conf.APIPassword);
	
	return sabatexWebApi.HTTPSPostForm(conf,"api/v0/login",form);
endfunction	

///
/// 
///
function POSTObject1C(conf, // налаштування
	                  id,   // id відправлення (string) 
	                  node, // отримувач (string)
					  dateStamp, // дата обєкта
					  objectType,// тип обєкта
					  objectId,  // внутрішнє ІД обєкта (string)
					  objectJSON) export

	postObject = new structure;
	postObject.Insert("DestinationNode",node.Description);
	postObject.Insert("Id",string(id));
	postObject.Insert("DateStamp",dateStamp);
	postObject.Insert("ObjectType",objectType.Description);
	postObject.Insert("ObjectId",String(objectId));
	postObject.Insert("ObjectJson",objectJSON);
	try	
		POSTObject(conf,"/api/v0",postObject);
		return true;
	except
		return false;
	endtry;	
		
endfunction	

function POSTObject(conf,url,object) export
	jsonText = sabatexJSON.Serialize(object);
	return sabatexWebApi.HTTPSPostJson(conf,url,jsonText);
endfunction	

procedure Error(source,message,textJSON="")
endprocedure

Function ФункцияПреобразования(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	If ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Then
		Return Строка(Значение);
	EndIf ;
	Отказ = Истина;
EndFunction

function GetIncomingObjects(conf)
	query = new Map;
	query.Insert("take",conf.take);
	
	JSONText = sabatexWebApi.HTTPSGet(conf,"/api/v0/objects",query);
	return sabatexJSON.Deserialize(JSONText);
endfunction	

function GetResivedObjects(conf)
	query = new Map;
	query.Insert("take",conf.take);
	JSONText = sabatexWebApi.HTTPSGet(conf,"/api/v0/status",query);
	return sabatexJSON.Deserialize(JSONText);
endfunction	

procedure PostMarkResiveObjects(conf,objectId)
	POSTObject(conf,"/api/v0/status",objectId);	
endprocedure	

procedure PostUnresolvedQuery(conf,objectId,unresolved)
	unr = new structure;
	unr.Insert("objectId",objectId);
	unr.Insert("ObjectsJson",sabatexJSON.Serialize(unresolved));
	POSTObject(conf,"/api/v0/queries",unr);	
endprocedure	

// return array unresolved objects
function ParseРеализацияТоваровУслуг(jsonDoc)
	
	
	
	return new array;	
endfunction	

function ParseIncomingObject(incoming)
	objectName =  incoming.ObjectTypeName;
	if (objectName = "Документ.РеализацияТоваровУслуг") then
		return ParseРеализацияТоваровУслуг(incoming.ObjectJSON);
	endif;	
	
	
	//    public Guid Id { get; set; }
	//[MaxLength(255)]
	//[Required]
	//public string ObjectId { get; set; }

	//[MaxLength(255)]
	//public string ObjectTypeName { get; set; }
   
////    public ClientNode Sender { get; set; }
	//public int SenderId { get; set; }
	//public ClientNode Destination { get; set; }
	//public int DestinationId { get; set; }
	//public ExchangeStatus Status { get; set; }
	//public DateTime DateStamp { get; set; }
	//public string ObjectJSON { get; set; }
	
endfunction	

procedure ReciveObjects(conf)
	// read incoming objects
	
	incoming = GetIncomingObjects(conf);
	for each item in incoming do
		НачатьТранзакцию();
		try
			unresolved = ParseIncomingObject(item);		
			if unresolved.Count() = 0 then
				PostMarkResiveObjects(conf,item.Id);
			else
				PostUnresolvedQuery(conf,item.Id,unresolved);
			endif;
		except
			RollbackTransaction();
			// fix error
	        return;
		endtry;
		ЗафиксироватьТранзакцию();
	enddo;	
endprocedure

procedure SetDateSend(id)
		reg = РегистрыСведений.sabatexExchange.СоздатьМенеджерЗаписи();
		reg.Id = id;
		reg.Прочитать(); 
		reg.dateSend = CurrentDate();
		reg.Записать();
endprocedure	

procedure PostObjects(conf)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ "+ conf.take + "
		|	sabatexExchange.Id КАК Id,
		|	sabatexExchange.node КАК node,
		|	sabatexExchange.objectJSON КАК objectJSON,
		|	sabatexExchange.dateStamp КАК dateStamp,
		|	sabatexExchange.objectId КАК objectId,
		|	sabatexExchange.dateSend КАК dateSend,
		|	sabatexExchange.dateRecesive КАК dateRecesive,
		|	sabatexExchange.OwnerId КАК OwnerId,
		|	sabatexExchange.objectType КАК objectType
		|ИЗ
		|	РегистрСведений.sabatexExchange КАК sabatexExchange
		|ГДЕ
		|	sabatexExchange.dateSend =ДАТАВРЕМЯ(1,1,1,0,0,0)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	items = РезультатЗапроса.Выбрать();
	
	Пока items.Следующий() Цикл
		if POSTObject1C(conf,items.Id,items.node,items.dateStamp,items.objectType,items.objectId,items.objectJSON) then
			SetDateSend(items.Id);	
		endif;
	КонецЦикла;
endprocedure	

procedure DeleteSendedObjects(conf)
	recesived = GetResivedObjects(conf);
	for each item in recesived do
		node = Справочники.sabatexExchangeNodes.НайтиПоНаименованию(item.Destination);
		if node = Справочники.sabatexExchangeNodes.ПустаяСсылка() then
			Error("DeleteSendedObjects","Помилковий нод ", sabatexJSON.Serialize(item)) ;
			continue;	
		endif;	
		
		reg = РегистрыСведений.sabatexExchange.СоздатьМенеджерЗаписи();
		reg.node = node;
		reg.objectId = item.ObjectId;
		reg.dateStamp = item.ObjectDateStamp;
		reg.Прочитать();
		reg.dateRecesive = CurrentDate();
		reg.Записать();
	enddo;	

endprocedure	

procedure RegisterObjectForExchange(obj) export
	ref	= obj.Ref;
	name = ref.Metadata().FullName();
	 
	spr = Справочники.sabatexExchangeObjects.НайтиПоНаименованию(name);
	if spr = Справочники.sabatexExchangeObjects.ПустаяСсылка() then
		Error("RegisterObjectForExchange","Для обєкта - " + name + "не передбачено обмін");
		return;	
	endif;
	
	if spr.Nodes.Count() = 0 then
		Error("RegisterObjectForExchange","Для обєкта - " + name + "не задані ноди обміну");
		return;	
	endif;	
	
	for each dest in spr.Nodes do
		if dest.FilterContragent <> Справочники.Контрагенты.ПустаяСсылка() then
			try
				if obj.Контрагент <> dest.FilterContragent then
					continue;
				endif;
			except
				continue;
			endtry;
		endif;	
			
		rs = РегистрыСведений.sabatexExchange.СоздатьМенеджерЗаписи();
		rs.Id = new UUID();
		rs.dateStamp = CurrentDate();
		rs.node = dest.Node;
		rs.objectType = spr;
		rs.objectId = ref.UUID();
		rs.objectJSON = sabatexJSON.SerializeXDTO(obj);
		rs.Write();
	enddo;	
endprocedure	

procedure ExchangeProcess() export

	filter = new structure;
	filter.Insert("id",1);
	conf =  РегистрыСведений.sabatexNodeConfig.Получить(filter);
	
	// login to server
	try
		token = Login(conf);
	except
		Error("login","Помилка входу на сервер");
		return;
	endtry;	
	
	headers=new Map;
	headers.Insert("apiToken",token);
	conf.Insert("headers",headers);
	
	
	// видаляємо обєкти прийняті отримувачем
	DeleteSendedObjects(conf);
	
	// считуємо 50 обєктів з сервіса 
	ReciveObjects(conf);

	// відправляємо 50 обєктів
	PostObjects(conf);
endprocedure

