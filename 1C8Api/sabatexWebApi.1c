// Copyright (c) 2021 by Serhiy Lakas (github sabatex)
// Призначений для полегшння роботи з WEBApi
// version 1.0.2
function ErrorConnectionString(conf)
	return "Сервер https://" + conf.Host +":"+conf.Port; 	
endfunction	

function CreateHTTPSConnection(conf)
	return new HTTPConnection(
		conf.host, // сервер (хост)
        conf.port, // порт, по умолчанию для http используется 80, для https 443
        , // пользователь для доступа к серверу (если он есть)
        , // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
        new ЗащищенноеСоединениеOpenSSL( неопределено, неопределено ) // защищенное соединение, если используется https
	);
endfunction	

function BuildUrl(url,queries=null)
	result  = url;
		if queries <> null then
			result  = result +"?";
			last = false;
			for each item in queries do
				if last then
					result = result + "&";
				endif;
				last=true;
				result = result + item.Ключ +"="+item.Значение;
			enddo;
		endif;
	return result;
endfunction	

function CreateHTTPRequest(conf,url,queries=null)
	var headers;
	request = new HTTPRequest(BuildUrl(url,queries));
	if conf.Property("headers",headers) then
		if headers <> null then
			for each header in headers do
				request.Headers.Insert(header.Ключ, header.Значение);
			enddo;
		endif;
	endif;
	return request;
endfunction	

function HTTPSGet(conf,url,queries=null) export
	connection = CreateHTTPSConnection(conf);
	request = CreateHTTPRequest(conf,url,queries);
	response = connection.Get(request);
	if response.StatusCode = 200 then
		return response.GetBodyAsString();
	else
		raise "Помилка запиту "+ url + " with StatusCode " + response.StatusCode; 
	endif;
endfunction

function HTTPSPostForm(conf,url,formParams=null) export
	connection = CreateHTTPSConnection(conf);
	request = CreateHTTPRequest(conf,url);
	request.Headers.Insert("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
	request.Headers.Insert("accept","*/*");

	if formParams <> null then
		form = "";
		last = false;
		for each item in formParams do
			if last then
				form = form + "&";
			endif;
			last = true;
			form = form + item.Ключ +"="+item.Значение;
		enddo;	
	endif;
	
	request.SetBodyFromString(form,"UTF-8",ИспользованиеByteOrderMark.НеИспользовать);
	try
		response = connection.Post(request);
		if response.StatusCode = 200 then
			return response.GetBodyAsString();
		else
			raise "Помилка запиту "+ url + " with StatusCode " + response.StatusCode; 
		endif;
 	except
		raise ErrorConnectionString(conf); 
	endtry;
	
	return response;
endfunction

function HTTPSPostJson(conf,url,jsonString) export
	connection = CreateHTTPSConnection(conf);
	request = CreateHTTPRequest(conf,url);
	request.Headers.Insert("Content-Type", "application/json; charset=utf-8");
	request.Headers.Insert("accept","*/*");
	request.SetBodyFromString(jsonString,"UTF-8",ИспользованиеByteOrderMark.НеИспользовать);
	response = connection.Post(request);
	if response.StatusCode = 200 then
		return response.GetBodyAsString();
	else
		raise "Помилка POST "+ url + " with StatusCode " + response.StatusCode; 
	endif;

endfunction	

