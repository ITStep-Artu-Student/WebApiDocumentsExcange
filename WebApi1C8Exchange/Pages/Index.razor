@page "/"
@attribute [Authorize(Roles ="Admin, User")]
@using Microsoft.EntityFrameworkCore
@using Radzen
@using System.Text.Unicode
@using WebApiDocumentsExchange.Models
@using WebApiDocumentsExchange.Data
@inject ApplicationDbContext dbContext
@inject DialogService DialogService
@inject IJSRuntime JSRuntime


<PageTitle>Index</PageTitle>
<RadzenDataGrid Data="@items" TItem="ObjectExchange"  @ref="grid"
                AllowFiltering="true"
                AllowColumnResize="true"
                AllowPaging="true"
                PageSize="10"
                AllowSorting="true"
                SelectionMode="DataGridSelectionMode.Single">
    <Columns>
         <RadzenDataGridColumn TItem="ObjectExchange" Property="Sender" Title="Sender" MinWidth="200px"/>
         <RadzenDataGridColumn TItem="ObjectExchange" Property="Destination" Title="Destination" MinWidth="100px"/>
         <RadzenDataGridColumn TItem="ObjectExchange" Property="ObjectId" Title="Object Id" MinWidth="100px"/>
         <RadzenDataGridColumn TItem="ObjectExchange" Property="ObjectType" Title="Object Type" MinWidth="200px"/>
         <RadzenDataGridColumn TItem="ObjectExchange" Property="DateStamp" Title="DateStamp" MinWidth="100px"/>
         <RadzenDataGridColumn TItem="ObjectExchange" Property="ObjectJSON" Title="JSON" MinWidth="100px"/>
    </Columns>
</RadzenDataGrid>


@code {
    RadzenDataGrid<ObjectExchange> grid;
    private IEnumerable<ObjectExchange> items;
    private string senderFilter = default!;

    //private void SetFilter()
    //{
    //    var query = dbContext.ObjectExchanges.AsQueryable();
    //    if (senderFilter != string.Empty)
    //        query = query.Where(s => s.Sender.Id == int.Parse(senderFilter));
    //    items = query.OrderByDescending(k=>k.DateStamp);
    //}

    protected override void OnInitialized()
    {
        items = dbContext.ObjectExchanges;
    }

    //void OnClientChange(object value)
    //{
    //    senderFilter = (string)value;
    //    SetFilter();
    //}    


}